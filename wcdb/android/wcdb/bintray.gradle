apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

def propertyWithDefault(name, defVal) {
    return rootProject.hasProperty(name) ? rootProject.getProperty(name) : defVal;
}

bintray {
    publications = ['wcdbLibrary']

    user = propertyWithDefault('BINTRAY_USER', '')
    key = propertyWithDefault('BINTRAY_APIKEY', '')
    pkg {
        repo = 'wcdb'
        name = 'wcdb-android'
        desc = ''
        websiteUrl = 'https://github.com/Tencent/wcdb'
        issueTrackerUrl = 'https://github.com/Tencent/wcdb/issues'
        vcsUrl = 'https://github.com/Tencent/wcdb.git'
        licenses = ['BSD 3-Clause']

        version {
            name = rootProject.VERSION_NAME
            released = new Date()
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name 'BSD 3-Clause License'
            url 'https://opensource.org/licenses/BSD-3-Clause'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id propertyWithDefault('DEVELOPER_ID', '')
            name propertyWithDefault('DEVELOPER_NAME', '')
            email propertyWithDefault('DEVELOPER_EMAIL', '')
        }
    }

    scm {
        url 'https://github.com/Tencent/wcdb'
    }
}

publishing {
    publications {
        wcdbLibrary(MavenPublication) {
            groupId 'com.tencent.wcdb'
            artifactId 'wcdb-android'
            version rootProject.VERSION_NAME

            pom {
                packaging 'aar'

                withXml {
                    def root = asNode()
                    root.appendNode('description', '')
                    root.appendNode('name', 'WCDB')
                    root.appendNode('url', 'https://github.com/Tencent/wcdb')
                    root.children().last() + pomConfig

                    def depNode = root.appendNode('dependencies')
                    configurations.compile.allDependencies.each {
                        if (it.group != null) {
                            def dependencyNode = depNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

afterEvaluate {
    publishing.publications.wcdbLibrary {
        artifact(bundleRelease)
        artifact(bundleReleaseJavadoc)
        artifact(bundleReleaseSources)
    }

    tasks.withType(PublishToMavenRepository) { task ->
        task.dependsOn build
    }
    tasks.withType(PublishToMavenLocal) { task ->
        task.dependsOn build
    }

    bintrayUpload {
        for (def pub : bintray.publications) {
            dependsOn "publish${pub.capitalize()}PublicationToMavenLocal"
        }
    }
}
